{"version":3,"names":[],"mappings":"","sources":["js/sketch.js"],"sourcesContent":["/* public/js/sketch.js\n * Originally created 10/11/2018 by Perry Naseck (DaAwesomeP)\n * https://github.com/DaAwesomeP/balloon-popper\n *\n * Copyright 2018-present Perry Naseck (DaAwesomeP)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict'\n\nimport colors from '../data/colorsHex'\n\nvar clock = new THREE.Clock()\n\nvar camera, controls, scene, renderer\nvar mixer, skeletonHelper\n\ninit()\nanimate()\n\nvar loader = new THREE.BVHLoader()\nloader.load('bvh/fighting-31-syotei-yokoyama.bvh', result => {\n  skeletonHelper = new THREE.SkeletonHelper(result.skeleton.bones[0])\n  skeletonHelper.material.linewidth = 10\n  skeletonHelper.skeleton = result.skeleton // allow animation mixer to bind to SkeletonHelper directly\n\n  var boneContainer = new THREE.Group()\n  boneContainer.add(result.skeleton.bones[0])\n\n  scene.add(skeletonHelper)\n  scene.add(boneContainer)\n\n  // play animation\n  mixer = new THREE.AnimationMixer(skeletonHelper)\n  mixer.clipAction(result.clip).setEffectiveWeight(1.0).play()\n})\n\n// create an AudioListener and add it to the camera\nvar listener = new THREE.AudioListener()\ncamera.add(listener)\n\n// create a global audio source\nvar sound = new THREE.Audio(listener)\n\n// load a sound and set it as the Audio object's buffer\nvar audioLoader = new THREE.AudioLoader()\naudioLoader.load('audio/Balloon Popping-SoundBible.com-1247261379.wav', buffer => {\n  sound.setBuffer(buffer)\n  sound.setLoop(false)\n  sound.setVolume(1)\n})\n\nvar ambientLight = new THREE.AmbientLight(0x000000)\nscene.add(ambientLight)\n\nvar lights = []\nlights[0] = new THREE.PointLight(0xffffff, 1, 0)\nlights[1] = new THREE.PointLight(0xffffff, 1, 0)\nlights[2] = new THREE.PointLight(0xffffff, 1, 0)\n\nlights[0].position.set(0, 2000, 0)\nlights[1].position.set(1000, 2000, 0)\nlights[2].position.set(-1000, -2000, 0)\n\nscene.add(lights[0])\nscene.add(lights[1])\nscene.add(lights[2])\n\nlet newBalloon = (r, color, x, y, z, o) => {\n  var geometry = new THREE.SphereGeometry(r, 32, 32)\n  var material = new THREE.MeshStandardMaterial({\n    color: color,\n    wireframe: false,\n    transparent: true,\n    opacity: o\n  })\n  var sphere = new THREE.Mesh(geometry, material)\n  sphere.position.set(x, y, z)\n  return sphere\n}\n\nlet newBalloonGrid = (r, i, s, o) => {\n  let balloons = []\n  let pad = (r * 2) + s\n  let c = ((i - 1) * pad) / 2\n  for (let x of Array(i).keys()) {\n    for (let y of Array(i - 4).keys()) {\n      for (let z of Array(i - 2).keys()) {\n        let color = colors[Math.floor(Math.random() * colors.length)]\n        let bx = x * pad - c + 100\n        let by = y * pad + r\n        let bz = z * pad - c + 250\n        let balloon = newBalloon(r, color, bx, by, bz, o)\n        scene.add(balloon)\n        balloons.push({\n          pos: {\n            x: bx,\n            y: by,\n            z: bz\n          },\n          r: r,\n          o: o,\n          color: color,\n          mesh: balloon\n        })\n      }\n    }\n  }\n  return balloons\n}\nlet balloons = newBalloonGrid(20, 10, 5, 1)\n\nfunction init () {\n  camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 1, 1000)\n  camera.position.set(0, 450, -400)\n\n  controls = new THREE.OrbitControls(camera)\n  controls.minDistance = 300\n  controls.maxDistance = 700\n\n  scene = new THREE.Scene()\n\n  scene.add(new THREE.GridHelper(200, 10))\n\n  // renderer\n  renderer = new THREE.WebGLRenderer({ antialias: true })\n  renderer.setClearColor(0xeeeeee)\n  renderer.setPixelRatio(window.devicePixelRatio)\n  renderer.setSize(window.innerWidth, window.innerHeight)\n\n  document.body.appendChild(renderer.domElement)\n\n  window.addEventListener('resize', onWindowResize, false)\n}\n\nfunction onWindowResize () {\n  camera.aspect = window.innerWidth / window.innerHeight\n  camera.updateProjectionMatrix()\n\n  renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\nvar set = false\nfunction animate () {\n  // if (!isPlay) return\n  window.requestAnimationFrame(animate)\n\n  var delta = clock.getDelta()\n\n  if (mixer) mixer.update(delta)\n  // if (skeletonHelper) skeletonHelper.update()\n\n  renderer.render(scene, camera)\n\n  if (skeletonHelper) {\n    if (!set) {\n      console.log(skeletonHelper.skeleton.bones)\n      set = true\n    }\n    if (skeletonHelper.skeleton) {\n      for (let bone of skeletonHelper.skeleton.bones) {\n        if (bone.name !== 'ENDSITE') {\n          for (let balloon of balloons) {\n            // console.log(skeletonHelper.skeleton.bones)\n            let ballPos = balloon.pos\n            let bonePos = bone.position\n            let dist = Math.sqrt(Math.pow(ballPos.x - bonePos.x, 2) + Math.pow(ballPos.y - bonePos.y, 2) + Math.pow(ballPos.z - bonePos.z, 2))\n            // console.log({ dist, ballPos, bonePos, name: bone.name })\n            if (dist <= balloon.r * 4 && balloon.mesh.material.opacity !== 0) {\n              console.log('KILL BALLOON')\n              // console.log({ dist, ballPos, bonePos, name: bone.name })\n              // scene.remove(balloon.mesh)\n              if (balloon.mesh.material.opacity !== 0) {\n                if (sound.isPlaying) sound.stop()\n                sound.play()\n              }\n              balloon.mesh.material.opacity = 0\n              // balloons.splice(balloons.indexOf(balloon))\n              // scene.add(newBalloon(balloon.r, balloon.color, ballPos.x, ballPos.y, ballPos.z, balloon.o))\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"],"file":"sketch.js"}